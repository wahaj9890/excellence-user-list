{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handlePageClick","e","selectedPage","selected","offset","state","perPage","setState","currentPage","pageNumber","receivedData","data","bind","axios","get","this","then","res","postData","map","user","Fragment","className","src","avatar","alt","first_name","last_name","email","pageCount","Math","ceil","total","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAKqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAuCRC,gBAAkB,SAACC,GAEjB,IAAMC,EAAeD,EAAEE,SAEjBC,EAASF,EAAe,EAAKG,MAAMC,QAEzC,EAAKC,SACH,CACEC,YAAaN,EACbE,OAAQA,EACRK,WAAYP,IAEd,WACE,EAAKQ,mBAnDT,EAAKL,MAAQ,CACXD,OAAQ,EACRO,KAAM,GACNL,QAAS,EACTG,WAAY,EACZD,YAAa,GAEf,EAAKR,gBAAkB,EAAKA,gBAAgBY,KAArB,gBATN,E,gDAWnB,WAAgB,IAAD,OACbC,IACGC,IADH,2CAC2CC,KAAKV,MAAMG,YAAc,IACjEQ,MAAK,SAACC,GACL,IAAMC,EAAWD,EAAIN,KAAKA,KAAKQ,KAAI,SAACC,GAAD,OACjC,cAAC,IAAMC,SAAP,UACE,sBAAKC,UAAU,gBAAf,UACE,qBAAKC,IAAKH,EAAKI,OAAQC,IAAI,GAAGH,UAAU,cAExC,8BACE,0CACCF,EAAKM,WAAa,GAAKN,EAAKO,aAE/B,8BACE,uCACCP,EAAKQ,SAER,+BAKN,EAAKrB,SAAS,CACZsB,UAAWC,KAAKC,KAAKd,EAAIN,KAAKqB,MAAQ,EAAK3B,MAAMC,SAEjDY,kB,+BAsBR,WACEH,KAAKL,iB,oBAEP,WACE,OACE,gCACGK,KAAKV,MAAMa,SACZ,cAAC,IAAD,CACEe,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,WAChBP,UAAWd,KAAKV,MAAMwB,UACtBQ,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAcxB,KAAKf,gBACnBwC,mBAAoB,aACpBC,sBAAuB,mBACvBC,gBAAiB,kB,GA7EMC,aCOlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5a7f3c84.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ReactPaginate from \"react-paginate\";\nimport \"./style.css\";\nimport Card from \"@material-ui/core/Card\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      offset: 0,\n      data: [],\n      perPage: 6,\n      pageNumber: 0,\n      currentPage: 0,\n    };\n    this.handlePageClick = this.handlePageClick.bind(this);\n  }\n  receivedData() {\n    axios\n      .get(`https://reqres.in/api/users?page=${this.state.currentPage + 1}`)\n      .then((res) => {\n        const postData = res.data.data.map((user) => (\n          <React.Fragment>\n            <div className=\"cardContainer\">\n              <img src={user.avatar} alt=\"\" className=\"userImage\" />\n\n              <p>\n                <b>UserName:</b>\n                {user.first_name + \"\" + user.last_name}\n              </p>\n              <p>\n                <b>Email:</b>\n                {user.email}\n              </p>\n              <hr />\n            </div>\n          </React.Fragment>\n        ));\n\n        this.setState({\n          pageCount: Math.ceil(res.data.total / this.state.perPage),\n\n          postData,\n        });\n      });\n  }\n  handlePageClick = (e) => {\n    debugger;\n    const selectedPage = e.selected;\n\n    const offset = selectedPage * this.state.perPage;\n\n    this.setState(\n      {\n        currentPage: selectedPage,\n        offset: offset,\n        pageNumber: selectedPage,\n      },\n      () => {\n        this.receivedData();\n      }\n    );\n  };\n\n  componentDidMount() {\n    this.receivedData();\n  }\n  render() {\n    return (\n      <div>\n        {this.state.postData}\n        <ReactPaginate\n          previousLabel={\"prev\"}\n          nextLabel={\"next\"}\n          breakLabel={\"...\"}\n          breakClassName={\"break-me\"}\n          pageCount={this.state.pageCount}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={5}\n          onPageChange={this.handlePageClick}\n          containerClassName={\"pagination\"}\n          subContainerClassName={\"pages pagination\"}\n          activeClassName={\"active\"}\n        />\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}